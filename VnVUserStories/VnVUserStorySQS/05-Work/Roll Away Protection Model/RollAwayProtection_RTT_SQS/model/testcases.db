/** @rttPrint
 * Model coverage goal: basic control state coverage
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-BCS-0001 Cover basic control state Standstill
 * @condition TRUE
 * @event     Component IMR.SystemUnderTest.RollAwayProtection
 *            reaches basic control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @expected  The actions associated with the transition entering
 *            this control state, and the control state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: basic control state coverage
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-BCS-0002 Cover basic control state Brake
 * @condition TRUE
 * @event     Component IMR.SystemUnderTest.RollAwayProtection
 *            reaches basic control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake
 * @expected  The actions associated with the transition entering
 *            this control state, and the control state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.6
 */
/** @rttPrint
 * Model coverage goal: basic control state coverage
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-BCS-0003 Cover basic control state CalculateRollAwayDistance
 * @condition TRUE
 * @event     Component IMR.SystemUnderTest.RollAwayProtection
 *            reaches basic control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance
 * @expected  The actions associated with the transition entering
 *            this control state, and the control state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal: basic control state coverage
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-BCS-0004 Cover basic control state TrainMovement
 * @condition TRUE
 * @event     Component IMR.SystemUnderTest.RollAwayProtection
 *            reaches basic control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.TrainMovement
 * @expected  The actions associated with the transition entering
 *            this control state, and the control state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 0) && (IMR.ControllerPosition == 2)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0001 MC/DC coverage of transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.SpeedDirection@0 == 0) && (IMR.ControllerPosition@0 == 2)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((IMR.SpeedDirection@0 == 0) && (IMR.ControllerPosition@0 == 2))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0002 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 != 0) && (IMR.ControllerPosition@0 == 2)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0)) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0003 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 == 0) && (IMR.ControllerPosition@0 != 2)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0)) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 2) && (IMR.ControllerPosition == 0)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0004 MC/DC coverage of transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.SpeedDirection@0 == 2) && (IMR.ControllerPosition@0 == 0)) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2))) && ((IMR.SpeedDirection@0 == 2) && (IMR.ControllerPosition@0 == 0))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0005 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 != 2) && (IMR.ControllerPosition@0 == 0)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0006 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 == 2) && (IMR.ControllerPosition@0 != 0)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 0) && (IMR.ControllerPosition == 1)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0007 MC/DC coverage of transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.SpeedDirection@0 == 0) && (IMR.ControllerPosition@0 == 1)) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && (((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0)))) && ((IMR.SpeedDirection@0 == 0) && (IMR.ControllerPosition@0 == 1))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0008 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 != 0) && (IMR.ControllerPosition@0 == 1)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0009 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 == 0) && (IMR.ControllerPosition@0 != 1)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 2) && (IMR.ControllerPosition == 1)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0010 MC/DC coverage of transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.SpeedDirection@0 == 2) && (IMR.ControllerPosition@0 == 1)) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1)))) && ((IMR.SpeedDirection@0 == 2) && (IMR.ControllerPosition@0 == 1))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0011 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 != 2) && (IMR.ControllerPosition@0 == 1)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0012 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 == 2) && (IMR.ControllerPosition@0 != 1)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.ControllerPosition == 0) && (IMR.SpeedDirection == 0)) ] --> 
 *   RollAwayProtection.TrainMovement
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0013 MC/DC coverage of transition Standstill --> TrainMovement
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.ControllerPosition@0 == 0) && (IMR.SpeedDirection@0 == 0)) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && (((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1)))) && ((IMR.ControllerPosition@0 == 0) && (IMR.SpeedDirection@0 == 0))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0014 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.ControllerPosition@0 != 0) && (IMR.SpeedDirection@0 == 0)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0015 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.ControllerPosition@0 == 0) && (IMR.SpeedDirection@0 != 0)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 2) || (IMR.SpeedDirection@0 != 2)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.ControllerPosition == 2) && (IMR.SpeedDirection == 2)) ] --> 
 *   RollAwayProtection.TrainMovement
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0016 MC/DC coverage of transition Standstill --> TrainMovement
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.ControllerPosition@0 == 2) && (IMR.SpeedDirection@0 == 2)) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0)))) && ((IMR.ControllerPosition@0 == 2) && (IMR.SpeedDirection@0 == 2))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0017 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.ControllerPosition@0 != 2) && (IMR.SpeedDirection@0 == 2)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0018 MC/DC stability condition of  Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.ControllerPosition@0 == 2) && (IMR.SpeedDirection@0 != 2)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill@0 && ((((((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 2)) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 0))) && ((IMR.SpeedDirection@0 != 0) || (IMR.ControllerPosition@0 != 1))) && ((IMR.SpeedDirection@0 != 2) || (IMR.ControllerPosition@0 != 1))) && ((IMR.ControllerPosition@0 != 0) || (IMR.SpeedDirection@0 != 0)))))
 * @expected  The state machine remains stable
 * @req 3.14.2.7
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Brake
 *       -- [ ((IMR.SpeedDirection == 1) && (IMR.RAPAck == 1)) ] --> 
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0019 MC/DC coverage of transition Brake --> Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            (((IMR.SpeedDirection@0 == 1) && (IMR.RAPAck@0 == 1)) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake@0 && ((IMR.SpeedDirection@0 == 1) && (IMR.RAPAck@0 == 1))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.6
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Brake
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0020 MC/DC stability condition of  Brake
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 != 1) && (IMR.RAPAck@0 == 1)) && IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake@0)
 * @expected  The state machine remains stable
 * @req 3.14.2.6
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Brake
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0021 MC/DC stability condition of  Brake
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake
 * @event     The following MC/DC stability condition becomes true:
 *            (((IMR.SpeedDirection@0 == 1) && (IMR.RAPAck@0 != 1)) && IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake@0)
 * @expected  The state machine remains stable
 * @req 3.14.2.6
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.CalculateRollAwayDistance
 *       -- [ (((IMR.TrainLocation - IMR.TrainLocationLastStandstill) > IMR.D_NVROLL) || ((IMR.TrainLocation - IMR.TrainLocationLastStandstill) > (-IMR.D_NVROLL))) ] --> 
 *   RollAwayProtection.Brake
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0022 MC/DC coverage of transition CalculateRollAwayDistance --> Brake
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            ((((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) > IMR.D_NVROLL@0) && ((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) <= (-IMR.D_NVROLL@0))) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance@0 && (IMR.SpeedDirection@0 != 1)) && (((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) > IMR.D_NVROLL@0) || ((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) > (-IMR.D_NVROLL@0)))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC coverage of transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.CalculateRollAwayDistance
 *       -- [ (((IMR.TrainLocation - IMR.TrainLocationLastStandstill) > IMR.D_NVROLL) || ((IMR.TrainLocation - IMR.TrainLocationLastStandstill) > (-IMR.D_NVROLL))) ] --> 
 *   RollAwayProtection.Brake
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0023 MC/DC coverage of transition CalculateRollAwayDistance --> Brake
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance
 * @event     The following MC/DC Trigger condition for specified transition becomes true:
 *            ((((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) <= IMR.D_NVROLL@0) && ((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) > (-IMR.D_NVROLL@0))) && ((IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance@0 && (IMR.SpeedDirection@0 != 1)) && (((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) > IMR.D_NVROLL@0) || ((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) > (-IMR.D_NVROLL@0)))))
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal: MC/DC coverage
 * MC/DC stability condition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-MCDC-0024 MC/DC stability condition of  CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance
 * @event     The following MC/DC stability condition becomes true:
 *            ((((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) <= IMR.D_NVROLL@0) && ((IMR.TrainLocation@0 - IMR.TrainLocationLastStandstill@0) <= (-IMR.D_NVROLL@0))) && (IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance@0 && (IMR.SpeedDirection@0 != 1)))
 * @expected  The state machine remains stable
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 0) && (IMR.ControllerPosition == 2)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0001 Cover transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.2
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 2) && (IMR.ControllerPosition == 0)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0002 Cover transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.2
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 0) && (IMR.ControllerPosition == 1)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0003 Cover transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.3
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.SpeedDirection == 2) && (IMR.ControllerPosition == 1)) ] --> 
 *   RollAwayProtection.CalculateRollAwayDistance
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0004 Cover transition Standstill --> CalculateRollAwayDistance
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.3
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.ControllerPosition == 0) && (IMR.SpeedDirection == 0)) ] --> 
 *   RollAwayProtection.TrainMovement
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0005 Cover transition Standstill --> TrainMovement
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Standstill
 *       -- [ ((IMR.ControllerPosition == 2) && (IMR.SpeedDirection == 2)) ] --> 
 *   RollAwayProtection.TrainMovement
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0006 Cover transition Standstill --> TrainMovement
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Standstill
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.Brake
 *       -- [ ((IMR.SpeedDirection == 1) && (IMR.RAPAck == 1)) ] --> 
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0007 Cover transition Brake --> Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.Brake
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.1.5
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.CalculateRollAwayDistance
 *       -- [ (IMR.SpeedDirection == 1) ] --> 
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0008 Cover transition CalculateRollAwayDistance --> Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.CalculateRollAwayDistance
 *       -- [ (((IMR.TrainLocation - IMR.TrainLocationLastStandstill) > IMR.D_NVROLL) || ((IMR.TrainLocation - IMR.TrainLocationLastStandstill) > (-IMR.D_NVROLL))) ] --> 
 *   RollAwayProtection.Brake
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0009 Cover transition CalculateRollAwayDistance --> Brake
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.CalculateRollAwayDistance
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 * @req 3.14.2.4
 */
/** @rttPrint
 * Model coverage goal : transition coverage
 * Cover transition of component IMR.SystemUnderTest.RollAwayProtection
 *   RollAwayProtection.TrainMovement
 *       -- [ (IMR.SpeedDirection == 1) ] --> 
 *   RollAwayProtection.Standstill
 * 
 * @tag       TC-RollAwayProtection_RTT_SQS_v7-TR-0010 Cover transition TrainMovement --> Standstill
 * @condition Component IMR.SystemUnderTest.RollAwayProtection
 *            resides in control state IMR.SystemUnderTest.RollAwayProtection.RollAwayProtection.TrainMovement
 * @event     Trigger condition for specified transition becomes true
 * @expected  The actions associated with the transition specified above,
 *            and the target state's entry actions are
 *            performed as specified in the model.
 * 
 * @note These checks are performed by the test oracles associated
 *       with component IMR.SystemUnderTest.RollAwayProtection
 */
/** @rttPrint
 * Unspecified test case
 *
 * @tag TC-RollAwayProtection_RTT_SQS_v7-TR-0011 Unspecified test case
 * @condition -unspecified-
 * @event -unspecified-
 * @expected -unspecified-
 *
 *  
 */
