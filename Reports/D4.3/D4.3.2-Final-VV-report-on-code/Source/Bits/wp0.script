(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Bitstream_Read_Normal_post_unchanged.
Hint Bitstream_Read_Normal,default,property,unchanged.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_Bitstream_Read_loop_inv_equal_preserved.
Hint Bitstream_Read,equal,preserved.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_Bitstream_Read_post_unchanged.
Hint Bitstream_Read,default,property,unchanged.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_Bitstream_WriteThenRead_assert_left.
Hint Bitstream_WriteThenRead,left,property.
Proof.
  unfold P_EqualBits64 in *.
  intros.

  remember i_1 as newpos.
  remember (t_2 .[ shiftfield_F_Bitstream_bitpos a]) as oldpos.
  remember (t_3 .[ shiftfield_F_Bitstream_addr a]) as addr.
  pose (length := newpos - oldpos).
  replace (newpos - oldpos) with length in * by auto.

  unfold P_EqualBits_3_ in *.
  rewrite <- Heqaddr in *.
  unfold P_EqualBits_2_ in *.

  remember (t_1 .[ shiftfield_F_Bitstream_bitpos a <- newpos]) as stream.

  replace i0 with (newpos - 1 - (newpos - 1 - i0)) by omega.

  unfold P_Bit8Array in *.
  unfold P_Bit8 in *.

  rewrite <- H18; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitstream_WriteThenRead_assert_lower_bits.
Hint Bitstream_WriteThenRead,lower_bits,property.
Proof.
  unfold P_EqualBits in *.
  unfold P_EqualBits_2_ in * .
  unfold P_EqualBitRange_2_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  replace (i_0)%Z with (v_0 - 1 - (v_0 - 1 - i_0))%Z by omega.
  rewrite H16; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitstream_WriteThenRead_assert_partial_copy.
Hint Bitstream_WriteThenRead,partial_copy,property.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_Bitstream_WriteThenRead_assert_lower_bits': 
  unfold P_EqualBits in *.
  unfold P_EqualBits_2_ in * .
  unfold P_EqualBitRange_2_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  replace (i_0)%Z with (v_0 - 1 - (v_0 - 1 - i_0))%Z by omega.
  rewrite H16; auto with zarith.
*)
(* --------------------------------------
  
From 'typed_ref_BitTest_Bitstream_WriteThenRead_post_unchanged': 
  unfold is_uint32 in *.
  intros.
  apply bits_equal_uint64; auto.
  intros.

  remember (v_0 - (Mint_1 .[ shift stream_0 2])) as length.
  remember (Mint_0 .[ shift stream_0 2]) as bitpos.

  unfold P_UpperBitsNotSet in *.
  unfold P_EqualBits_3_ in *.
  unfold P_EqualBits_2_ in *.

  assert(X: 0 <= i < length \/ length <= i < 64).
  +  assert (Y: (i < length) \/ ~(i < length)) by tauto.
     destruct Y as [le | geq].
     left; auto.
     right; auto with zarith.

  +  destruct X as [lower|upper].
     - replace (i) with (v_0 - 1 - (v_0 - 1 - i)) in * by omega.
       rewrite H17; auto with zarith.
     - assert(~ bit_test Bitstream_WriteThenRead_0 i) by (apply H14; auto with zarith).
       assert(~ bit_test value_0 i) by (apply H15; auto with zarith).
       tauto.

*)
Qed.

Goal typed_ref_BitTest_Bitstream_WriteThenRead_post_unchanged.
Hint Bitstream_WriteThenRead,default,property,unchanged.
Proof.
  unfold is_uint32 in *.
  intros.
  apply bits_equal_uint64; auto.
  intros.

  remember (v_0 - (Mint_1 .[ shift stream_0 2])) as length.
  remember (Mint_0 .[ shift stream_0 2]) as bitpos.

  unfold P_UpperBitsNotSet in *.
  unfold P_EqualBits_3_ in *.
  unfold P_EqualBits_2_ in *.

  assert(X: 0 <= i < length \/ length <= i < 64).
  +  assert (Y: (i < length) \/ ~(i < length)) by tauto.
     destruct Y as [le | geq].
     left; auto.
     right; auto with zarith.

  +  destruct X as [lower|upper].
     - replace (i) with (v_0 - 1 - (v_0 - 1 - i)) in * by omega.
       rewrite H17; auto with zarith.
     - assert(~ bit_test Bitstream_WriteThenRead_0 i) by (apply H14; auto with zarith).
       assert(~ bit_test value_0 i) by (apply H15; auto with zarith).
       tauto.

Qed.

Goal typed_ref_BitTest_Bitstream_Write_normal_case_post_middle.
Hint Bitstream_Write,middle,normal_case,property.
Proof.
  unfold P_EqualBits in *.
  unfold P_EqualBits_2_ in *.
  unfold P_EqualBits_1_ in *.
  unfold P_Normal in *.
  unfold is_uint32 in *.

  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember i_0 as i.
  remember stream_0 as stream.
  remember length_0 as length.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.
  rewrite H8 in *.

  replace (length + bitpos - bitpos) with length in * by omega.

  rewrite access_update_neq.
  + apply H30; auto with zarith. 

  + clear H28 H29 H30.
    apply separated_neq with (stream) (3%Z) (addr) (size).
    - assumption.
    - unfold included; simpl; auto with zarith.

    - assert ((0 <= (Cdiv i 8) < size)%Z).
      apply Cdiv_bounds; omega.
      unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Read_assert_2.
Hint Bitwalker_Read,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_SetBit8Array_post_left.
Hint SetBit8Array,default,left,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_SetBit8_assert_helper_part1.
Hint SetBit8,helper,part-0,property.
Proof.
  unfold is_uint8 in *.
  intros.
  apply bitwise_and_not_uint8; auto.
Qed.

Goal typed_ref_BitTest_SetBit8_assert_helper_part2.
Hint SetBit8,helper,part-1,property.
Proof.
  unfold is_uint8 in *.
  intros.
  apply bitwise_and_not_uint8; auto.
Qed.

Goal typed_ref_BitTest_SetBit8_assert_part1.
Hint SetBit8,part-0,property.
Proof.
  unfold is_uint8 in *.
  intros.
  apply bitwise_and_not_uint8; auto.
Qed.

Goal typed_ref_BitTest_SetBit8_assert_part2.
Hint SetBit8,part-1,property.
Proof.
  unfold is_uint8 in *.
  intros.
  apply bitwise_and_not_uint8; auto.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_assert_equiv.
Hint UpperBitsNotSet64,equiv,property.
Proof.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  intros.

  remember i_1 as value.
  remember i   as length.
  split.
  {
      intros.
      rewrite <- upper_bits_not_set in H5; auto with zarith.
      rewrite is_uint64_lsl1_inf; auto with zarith.
  }
  {
    rewrite <- upper_bits_not_set; auto with zarith.
    rewrite is_uint64_lsl1_inf; omega.
  }
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_not_set_part2.
Hint UpperBitsNotSet64,default,not_set,part-1,property.
Proof.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  intros.

  remember i_1 as value.
  remember i   as length. 

  rewrite is_uint64_lsl1_inf in H5; auto with zarith.
  intuition.
  assert (X: (forall i_0 : int, (length <= i_0)%Z -> ~ bit_test value i_0)) by auto with zarith.
  rewrite <- upper_bits_not_set in X; auto with zarith.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_not_set_part3.
Hint UpperBitsNotSet64,default,not_set,part-2,property.
Proof.
  unfold is_uint64 in *.
  intros.
  unfold P_UpperBitsNotSet in *.
  apply upper_bits_not_set; auto with zarith.
  rewrite is_uint64_lsl1_inf in H5; omega.
Qed.

Goal typed_ref_BitTest_lemma_CompareBit64.
Hint CompareBit64,property.
Proof.
  unfold P_EqualBits64.
  unfold P_EqualBits_2_ in *.
  intros.

  assert(X: forall i0 : int,
     (i0 < i_2)%Z ->
     (i_3 <= i0)%Z ->
     (bit_test i_1 (i_2 - 1 - i0) <-> bit_test i (i_2 - 1 - i0))).
  {
     intros.
     rewrite H3; auto with zarith.
  }

  replace i0 with (i_2 - 1 - (i_2 - 1 - i0))%Z by omega.
  rewrite X; auto with zarith.
  intuition.

 (*  remember i_3 as first.
     remember i_2 as last.
  *)
Qed.

Goal typed_ref_BitTest_lemma_X.
Hint X,property.
Proof.
  unfold P_EqualBits64 in *.
  intros.

  replace i0 with (i - 1 - (i - 1 - i0))%Z by omega.
  rewrite H1; auto with zarith.
  tauto.
Qed.

Goal typed_ref_BitTest_lemma_bitwise_and_not_uint8.
Hint bitwise_and_not_uint8,property.
Proof.
  unfold is_uint8 in *.
  intros.
  apply bitwise_and_lnot_uint8; auto.
Qed.

Goal typed_ref_BitTest_lemma_bitwise_and_uint8.
Hint bitwise_and_uint8,property.
Proof.
  unfold is_uint8 in *.
  intros.
  split.

Qed.


